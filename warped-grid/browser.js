(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

// Based on:
// https://medium.com/@francoisromain/smooth-a-svg-path-with-functional-programming-1b9876b8bf7e
var line = function line(pointA, pointB) {
  var lengthX = pointB.x - pointA.x;
  var lengthY = pointB.y - pointA.y;
  return {
    length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
    angle: Math.atan2(lengthY, lengthX)
  };
};

var makeControlPoint = function makeControlPoint(smoothing) {
  return function (current, previous, next, reverse) {
    var p = previous || current;
    var n = next || current;
    var o = line(p, n);
    var angle = o.angle + (reverse ? Math.PI : 0);
    var length = o.length * smoothing;
    var x = current.x + Math.cos(angle) * length;
    var y = current.y + Math.sin(angle) * length;
    return {
      x: x,
      y: y
    };
  };
};

var makeBezier = function makeBezier(draw) {
  return function (smoothing) {
    return function (point, i, a) {
      var controlPoint = makeControlPoint(smoothing);
      var cps = controlPoint(a[i - 1], a[i - 2], point);
      var cpe = controlPoint(point, a[i - 1], a[i + 1], true);
      return draw(cps, cpe, point);
    };
  };
};

var _default = makeBezier;
exports["default"] = _default;
},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ctxLocalGradient = exports.ctxFillStroke = exports.createDistortedGridCtxAnimated = exports.createDistortedGridCtx = void 0;

var _bezier = _interopRequireDefault(require("./bezier"));

var _grid = _interopRequireDefault(require("./grid"));

var _distort = require("./distort");

var _defaults = _interopRequireDefault(require("./defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ctxBezier = function ctxBezier(smoothing) {
  return function (ctx) {
    return (0, _bezier["default"])(function (cps, cpe, point) {
      ctx.bezierCurveTo(cps.x, cps.y, cpe.x, cpe.y, point.x, point.y);
    })(smoothing);
  };
};

var ctxLine = function ctxLine(ctx) {
  return function (point) {
    ctx.lineTo(point.x, point.y);
  };
};

var ctxPath = function ctxPath(ctx) {
  return function (points, ctxCommand, draw) {
    ctx.beginPath();
    points.forEach(function (point, i, a) {
      return i === 0 ? ctx.moveTo(point.x, point.y) : ctxCommand(point, i, a);
    });
    draw(ctx, points);
  };
};

var ctxFillStroke = function ctxFillStroke(ctx) {
  ctx.fill();
  ctx.stroke();
};

exports.ctxFillStroke = ctxFillStroke;

var findBounds = function findBounds(points) {
  var min = _objectSpread({}, points[0]);

  var max = _objectSpread({}, points[0]);

  points.forEach(function (point) {
    if (min.x > point.x) {
      min.x = point.x;
    }

    if (min.y > point.y) {
      min.y = point.y;
    }

    if (max.x < point.x) {
      max.x = point.x;
    }

    if (max.y < point.y) {
      max.y = point.y;
    }
  });
  return {
    min: min,
    max: max
  };
};

var ctxLocalGradient = function ctxLocalGradient(colorStops) {
  return function (ctx, points) {
    var _findBounds = findBounds(points),
        min = _findBounds.min,
        max = _findBounds.max;

    var linearGradient = ctx.createLinearGradient(min.x, max.y, max.x, max.y);
    ctx.fillStyle = linearGradient;
    colorStops.forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          stop = _ref2[0],
          color = _ref2[1];

      return linearGradient.addColorStop(stop, color);
    });
    ctxFillStroke(ctx);
  };
};

exports.ctxLocalGradient = ctxLocalGradient;

var ctxMakeConnect = function ctxMakeConnect(ctx, ctxCommand, draw) {
  var path = ctxPath(ctx);
  var command = ctxCommand(ctx);
  return function (lines) {
    return lines.forEach(function (line) {
      return path(line, command, draw);
    });
  };
};

var createDistortedGridCtx = function createDistortedGridCtx(ctx) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$top = _ref3.top,
      top = _ref3$top === void 0 ? _defaults["default"].top : _ref3$top,
      _ref3$left = _ref3.left,
      left = _ref3$left === void 0 ? _defaults["default"].left : _ref3$left,
      _ref3$width = _ref3.width,
      width = _ref3$width === void 0 ? _defaults["default"].width : _ref3$width,
      _ref3$height = _ref3.height,
      height = _ref3$height === void 0 ? _defaults["default"].height : _ref3$height,
      _ref3$xSpacing = _ref3.xSpacing,
      xSpacing = _ref3$xSpacing === void 0 ? _defaults["default"].xSpacing : _ref3$xSpacing,
      _ref3$ySpacing = _ref3.ySpacing,
      ySpacing = _ref3$ySpacing === void 0 ? _defaults["default"].ySpacing : _ref3$ySpacing,
      _ref3$pointSpacing = _ref3.pointSpacing,
      pointSpacing = _ref3$pointSpacing === void 0 ? _defaults["default"].pointSpacing : _ref3$pointSpacing,
      _ref3$scale = _ref3.scale,
      scale = _ref3$scale === void 0 ? _defaults["default"].scale : _ref3$scale,
      _ref3$intensity = _ref3.intensity,
      intensity = _ref3$intensity === void 0 ? _defaults["default"].intensity : _ref3$intensity,
      _ref3$smoothing = _ref3.smoothing,
      smoothing = _ref3$smoothing === void 0 ? _defaults["default"].smoothing : _ref3$smoothing,
      _ref3$draw = _ref3.draw,
      draw = _ref3$draw === void 0 ? _defaults["default"].draw : _ref3$draw;

  var connect = ctxMakeConnect(ctx, smoothing !== 0 ? ctxBezier(smoothing) : ctxLine, draw);
  var distort = (0, _distort.makeDistort)({
    scale: scale,
    intensity: intensity
  });
  var grid = (0, _grid["default"])({
    top: top,
    left: left,
    width: width,
    height: height,
    xSpacing: xSpacing,
    ySpacing: ySpacing,
    pointSpacing: pointSpacing
  });
  connect(distort(grid));
};

exports.createDistortedGridCtx = createDistortedGridCtx;

var createDistortedGridCtxAnimated = function createDistortedGridCtxAnimated(ctx) {
  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref4$top = _ref4.top,
      top = _ref4$top === void 0 ? _defaults["default"].top : _ref4$top,
      _ref4$left = _ref4.left,
      left = _ref4$left === void 0 ? _defaults["default"].left : _ref4$left,
      _ref4$width = _ref4.width,
      width = _ref4$width === void 0 ? _defaults["default"].width : _ref4$width,
      _ref4$height = _ref4.height,
      height = _ref4$height === void 0 ? _defaults["default"].height : _ref4$height,
      _ref4$xSpacing = _ref4.xSpacing,
      xSpacing = _ref4$xSpacing === void 0 ? _defaults["default"].xSpacing : _ref4$xSpacing,
      _ref4$ySpacing = _ref4.ySpacing,
      ySpacing = _ref4$ySpacing === void 0 ? _defaults["default"].ySpacing : _ref4$ySpacing,
      _ref4$pointSpacing = _ref4.pointSpacing,
      pointSpacing = _ref4$pointSpacing === void 0 ? _defaults["default"].pointSpacing : _ref4$pointSpacing,
      _ref4$scale = _ref4.scale,
      scale = _ref4$scale === void 0 ? _defaults["default"].scale : _ref4$scale,
      _ref4$intensity = _ref4.intensity,
      intensity = _ref4$intensity === void 0 ? _defaults["default"].intensity : _ref4$intensity,
      _ref4$smoothing = _ref4.smoothing,
      smoothing = _ref4$smoothing === void 0 ? _defaults["default"].smoothing : _ref4$smoothing,
      _ref4$draw = _ref4.draw,
      draw = _ref4$draw === void 0 ? _defaults["default"].draw : _ref4$draw,
      _ref4$speed = _ref4.speed,
      speed = _ref4$speed === void 0 ? _defaults["default"].speed : _ref4$speed;

  var connect = ctxMakeConnect(ctx, smoothing !== 0 ? ctxBezier(smoothing) : ctxLine, draw);
  var distort = (0, _distort.makeDistortAnimated)({
    scale: scale,
    intensity: intensity,
    speed: speed
  });
  var grid = (0, _grid["default"])({
    top: top,
    left: left,
    width: width,
    height: height,
    xSpacing: xSpacing,
    ySpacing: ySpacing,
    pointSpacing: pointSpacing
  });
  var distortedGrid = distort(grid);
  return function (time) {
    connect(distortedGrid(time));
  };
};

exports.createDistortedGridCtxAnimated = createDistortedGridCtxAnimated;
},{"./bezier":1,"./defaults":3,"./distort":4,"./grid":5}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var defaults = {
  top: 0,
  left: 0,
  width: 320,
  height: 240,
  xSpacing: 10,
  ySpacing: 10,
  pointSpacing: 50,
  scale: 0.01,
  intensity: 100,
  speed: 0.1,
  style: 'fill:none;stroke:gray;',
  backgroundElements: [],
  foregroundElements: [],
  smoothing: 0.2,
  singleQuotes: true,
  draw: function draw(ctx, points) {
    ctx.fill();
    ctx.stroke();
  } // eslint-disable-line no-unused-vars

};
var _default = defaults;
exports["default"] = _default;
},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeDistortAnimated = exports.makeDistort = void 0;

var _openSimplexNoise = require("open-simplex-noise");

var randInt = function randInt() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Number.MIN_SAFE_INTEGER;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_SAFE_INTEGER;
  return Math.floor(Math.random() * (max - min + 1) + min);
}; // Two simplex noise generators, for calculating the x and y displacement of each point


var makeDistortion = function makeDistortion(_ref) {
  var scale = _ref.scale,
      intensity = _ref.intensity;
  var noise = {
    x: (0, _openSimplexNoise.makeNoise2D)(randInt()),
    y: (0, _openSimplexNoise.makeNoise2D)(randInt())
  };
  return {
    x: function x(_x, y) {
      return noise.x(_x * scale, y * scale) * intensity;
    },
    y: function y(x, _y) {
      return noise.y(x * scale, _y * scale) * intensity;
    }
  };
};

var makeDistortionAnimated = function makeDistortionAnimated(_ref2) {
  var scale = _ref2.scale,
      intensity = _ref2.intensity,
      speed = _ref2.speed;
  var noise = {
    x: (0, _openSimplexNoise.makeNoise3D)(randInt()),
    y: (0, _openSimplexNoise.makeNoise3D)(randInt())
  };
  return {
    x: function x(_x2, y, time) {
      return noise.x(_x2 * scale, y * scale, time * speed) * intensity;
    },
    y: function y(x, _y2, time) {
      return noise.y(x * scale, _y2 * scale, time * speed) * intensity;
    }
  };
}; // Given a list of lines, distort each point in the line


var makeDistortLines = function makeDistortLines(distortion, lines) {
  return lines.map(function (line) {
    return line.map(function (_ref3) {
      var x = _ref3.x,
          y = _ref3.y;
      return {
        x: x + distortion.x(x, y),
        y: y + distortion.y(x, y)
      };
    });
  });
};

var makeDistortLinesAnimated = function makeDistortLinesAnimated(distortion, lines) {
  return function (time) {
    return lines.map(function (line) {
      return line.map(function (_ref4) {
        var x = _ref4.x,
            y = _ref4.y;
        return {
          x: x + distortion.x(x, y, time),
          y: y + distortion.y(x, y, time)
        };
      });
    });
  };
};

var makeDistort = function makeDistort(_ref5) {
  var scale = _ref5.scale,
      intensity = _ref5.intensity;
  return function (lines) {
    return makeDistortLines(makeDistortion({
      scale: scale,
      intensity: intensity
    }), lines);
  };
};

exports.makeDistort = makeDistort;

var makeDistortAnimated = function makeDistortAnimated(_ref6) {
  var scale = _ref6.scale,
      intensity = _ref6.intensity,
      speed = _ref6.speed;
  return function (lines) {
    return makeDistortLinesAnimated(makeDistortionAnimated({
      scale: scale,
      intensity: intensity,
      speed: speed
    }), lines);
  };
};

exports.makeDistortAnimated = makeDistortAnimated;
},{"open-simplex-noise":9}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Creates a grid specified as a list of lines, with each line a list of coordinate pairs
// Each line is made up of points spaced as given
var createGrid = function createGrid(_ref) {
  var top = _ref.top,
      left = _ref.left,
      width = _ref.width,
      height = _ref.height,
      xSpacing = _ref.xSpacing,
      ySpacing = _ref.ySpacing,
      pointSpacing = _ref.pointSpacing;

  var vertical = _toConsumableArray(Array(Math.ceil(height / ySpacing)).keys()).map(function (yNum) {
    return yNum * ySpacing;
  }).map(function (y) {
    return _toConsumableArray(Array(Math.ceil(width / pointSpacing) + 1).keys()).map(function (xNum) {
      return xNum * pointSpacing;
    }).map(function (x) {
      return {
        x: x + left,
        y: y + top
      };
    });
  });

  var horizontal = _toConsumableArray(Array(Math.ceil(width / xSpacing)).keys()).map(function (xNum) {
    return xNum * xSpacing;
  }).map(function (x) {
    return _toConsumableArray(Array(Math.ceil(height / pointSpacing) + 1).keys()).map(function (yNum) {
      return yNum * pointSpacing;
    }).map(function (y) {
      return {
        x: x + left,
        y: y + top
      };
    });
  });

  return [].concat(_toConsumableArray(vertical), _toConsumableArray(horizontal));
};

var _default = createGrid;
exports["default"] = _default;
},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.svgLinearGradient = exports.createDistortedGridSvgAnimated = exports.createDistortedGridSvg = void 0;

var _bezier = _interopRequireDefault(require("./bezier"));

var _grid = _interopRequireDefault(require("./grid"));

var _distort = require("./distort");

var _defaults = _interopRequireDefault(require("./defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var svgBezier = (0, _bezier["default"])(function (cps, cpe, point) {
  return "C ".concat(cps.x, ",").concat(cps.y, " ").concat(cpe.x, ",").concat(cpe.y, " ").concat(point.x, ",").concat(point.y);
});

var svgLine = function svgLine(point) {
  return "L ".concat(point.x, " ").concat(point.y);
};

var svgPath = function svgPath(points, command, style) {
  var d = points.reduce(function (acc, point, i, a) {
    return i === 0 ? "M ".concat(point.x, ",").concat(point.y) : "".concat(acc, " ").concat(command(point, i, a));
  }, '');
  return "<path d='".concat(d, "' style=\"").concat(style, "\" />");
};

var svgMakeConnect = function svgMakeConnect(command, style) {
  return function (lines) {
    return lines.reduce(function (acc, cur) {
      return acc + svgPath(cur, command, style);
    }, '');
  };
};

var svgLinearGradient = function svgLinearGradient() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$startColor = _ref.startColor,
      startColor = _ref$startColor === void 0 ? '#ff0' : _ref$startColor,
      _ref$startOpacity = _ref.startOpacity,
      startOpacity = _ref$startOpacity === void 0 ? 0.3 : _ref$startOpacity,
      _ref$stopColor = _ref.stopColor,
      stopColor = _ref$stopColor === void 0 ? '#f00' : _ref$stopColor,
      _ref$stopOpacity = _ref.stopOpacity,
      stopOpacity = _ref$stopOpacity === void 0 ? 1 : _ref$stopOpacity,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? 'grad' : _ref$id;

  return "<linearGradient id='".concat(id, "' x1='0%' y1='0%' x2='100%' y2='0%'><stop offset='0%' style='stop-color:").concat(startColor, ";stop-opacity:").concat(startOpacity, "' /><stop offset='100%' style='stop-color:").concat(stopColor, ";stop-opacity:").concat(stopOpacity, "' /></linearGradient>");
}; // eslint-disable-line


exports.svgLinearGradient = svgLinearGradient;

var createSvg = function createSvg(w, h, contents) {
  return "<svg xmlns='http://www.w3.org/2000/svg' width='".concat(w, "' height='").concat(h, "' viewBox='0 0 ").concat(w, " ").concat(h, "'>").concat(contents.join(''), "</svg>");
}; // eslint-disable-line


var prepareSvg = function prepareSvg(svg, htmlSafe) {
  return htmlSafe ? svg.replace(/"/g, '\'').replace(/\n/g, '').replace(/#/g, '%23') : svg;
};

var createDistortedGridSvg = function createDistortedGridSvg() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$top = _ref2.top,
      top = _ref2$top === void 0 ? _defaults["default"].top : _ref2$top,
      _ref2$left = _ref2.left,
      left = _ref2$left === void 0 ? _defaults["default"].left : _ref2$left,
      _ref2$width = _ref2.width,
      width = _ref2$width === void 0 ? _defaults["default"].width : _ref2$width,
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? _defaults["default"].height : _ref2$height,
      _ref2$xSpacing = _ref2.xSpacing,
      xSpacing = _ref2$xSpacing === void 0 ? _defaults["default"].xSpacing : _ref2$xSpacing,
      _ref2$ySpacing = _ref2.ySpacing,
      ySpacing = _ref2$ySpacing === void 0 ? _defaults["default"].ySpacing : _ref2$ySpacing,
      _ref2$pointSpacing = _ref2.pointSpacing,
      pointSpacing = _ref2$pointSpacing === void 0 ? _defaults["default"].pointSpacing : _ref2$pointSpacing,
      _ref2$scale = _ref2.scale,
      scale = _ref2$scale === void 0 ? _defaults["default"].scale : _ref2$scale,
      _ref2$intensity = _ref2.intensity,
      intensity = _ref2$intensity === void 0 ? _defaults["default"].intensity : _ref2$intensity,
      _ref2$style = _ref2.style,
      style = _ref2$style === void 0 ? _defaults["default"].style : _ref2$style,
      _ref2$backgroundEleme = _ref2.backgroundElements,
      backgroundElements = _ref2$backgroundEleme === void 0 ? _defaults["default"].backgroundElements : _ref2$backgroundEleme,
      _ref2$foregroundEleme = _ref2.foregroundElements,
      foregroundElements = _ref2$foregroundEleme === void 0 ? _defaults["default"].foregroundElements : _ref2$foregroundEleme,
      _ref2$smoothing = _ref2.smoothing,
      smoothing = _ref2$smoothing === void 0 ? _defaults["default"].smoothing : _ref2$smoothing,
      _ref2$htmlSafe = _ref2.htmlSafe,
      htmlSafe = _ref2$htmlSafe === void 0 ? _defaults["default"].htmlSafe : _ref2$htmlSafe;

  var connect = svgMakeConnect(smoothing !== 0 ? svgBezier(smoothing) : svgLine, style);
  var distort = (0, _distort.makeDistort)({
    scale: scale,
    intensity: intensity
  });
  var grid = (0, _grid["default"])({
    top: top,
    left: left,
    width: width,
    height: height,
    xSpacing: xSpacing,
    ySpacing: ySpacing,
    pointSpacing: pointSpacing
  });
  var distortedGrid = connect(distort(grid));
  var svg = createSvg(width, height, [].concat(_toConsumableArray(backgroundElements), [distortedGrid], _toConsumableArray(foregroundElements)));
  return prepareSvg(svg, htmlSafe);
};

exports.createDistortedGridSvg = createDistortedGridSvg;

var createDistortedGridSvgAnimated = function createDistortedGridSvgAnimated() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref3$top = _ref3.top,
      top = _ref3$top === void 0 ? _defaults["default"].top : _ref3$top,
      _ref3$left = _ref3.left,
      left = _ref3$left === void 0 ? _defaults["default"].left : _ref3$left,
      _ref3$width = _ref3.width,
      width = _ref3$width === void 0 ? _defaults["default"].width : _ref3$width,
      _ref3$height = _ref3.height,
      height = _ref3$height === void 0 ? _defaults["default"].height : _ref3$height,
      _ref3$xSpacing = _ref3.xSpacing,
      xSpacing = _ref3$xSpacing === void 0 ? _defaults["default"].xSpacing : _ref3$xSpacing,
      _ref3$ySpacing = _ref3.ySpacing,
      ySpacing = _ref3$ySpacing === void 0 ? _defaults["default"].ySpacing : _ref3$ySpacing,
      _ref3$pointSpacing = _ref3.pointSpacing,
      pointSpacing = _ref3$pointSpacing === void 0 ? _defaults["default"].pointSpacing : _ref3$pointSpacing,
      _ref3$scale = _ref3.scale,
      scale = _ref3$scale === void 0 ? _defaults["default"].scale : _ref3$scale,
      _ref3$intensity = _ref3.intensity,
      intensity = _ref3$intensity === void 0 ? _defaults["default"].intensity : _ref3$intensity,
      _ref3$style = _ref3.style,
      style = _ref3$style === void 0 ? _defaults["default"].style : _ref3$style,
      _ref3$backgroundEleme = _ref3.backgroundElements,
      backgroundElements = _ref3$backgroundEleme === void 0 ? _defaults["default"].backgroundElements : _ref3$backgroundEleme,
      _ref3$foregroundEleme = _ref3.foregroundElements,
      foregroundElements = _ref3$foregroundEleme === void 0 ? _defaults["default"].foregroundElements : _ref3$foregroundEleme,
      _ref3$smoothing = _ref3.smoothing,
      smoothing = _ref3$smoothing === void 0 ? _defaults["default"].smoothing : _ref3$smoothing,
      _ref3$speed = _ref3.speed,
      speed = _ref3$speed === void 0 ? _defaults["default"].speed : _ref3$speed,
      _ref3$htmlSafe = _ref3.htmlSafe,
      htmlSafe = _ref3$htmlSafe === void 0 ? _defaults["default"].htmlSafe : _ref3$htmlSafe;

  var connect = svgMakeConnect(smoothing !== 0 ? svgBezier(smoothing) : svgLine, style);
  var distort = (0, _distort.makeDistortAnimated)({
    scale: scale,
    intensity: intensity,
    speed: speed
  });
  var grid = (0, _grid["default"])({
    top: top,
    left: left,
    width: width,
    height: height,
    xSpacing: xSpacing,
    ySpacing: ySpacing,
    pointSpacing: pointSpacing
  });
  var distortedGrid = distort(grid);
  return function (time) {
    var svg = createSvg(width, height, [].concat(_toConsumableArray(backgroundElements), [connect(distortedGrid(time))], _toConsumableArray(foregroundElements)));
    return prepareSvg(svg, htmlSafe);
  };
};

exports.createDistortedGridSvgAnimated = createDistortedGridSvgAnimated;
},{"./bezier":1,"./defaults":3,"./distort":4,"./grid":5}],7:[function(require,module,exports){
module.exports = {
  svg: require('./dist/svg'),
  ctx: require('./dist/ctx'),
};

},{"./dist/ctx":2,"./dist/svg":6}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.p4D = exports.p3D = exports.p2D = exports.lookupPairs4D = exports.lookupPairs3D = exports.lookupPairs2D = exports.gradients4D = exports.gradients3D = exports.gradients2D = exports.base4D = exports.base3D = exports.base2D = exports.STRETCH_4D = exports.STRETCH_3D = exports.STRETCH_2D = exports.SQUISH_4D = exports.SQUISH_3D = exports.SQUISH_2D = exports.NORM_4D = exports.NORM_3D = exports.NORM_2D = void 0;
exports.NORM_2D = 1.0 / 47.0;
exports.NORM_3D = 1.0 / 103.0;
exports.NORM_4D = 1.0 / 30.0;
exports.SQUISH_2D = (Math.sqrt(2 + 1) - 1) / 2;
exports.SQUISH_3D = (Math.sqrt(3 + 1) - 1) / 3;
exports.SQUISH_4D = (Math.sqrt(4 + 1) - 1) / 4;
exports.STRETCH_2D = (1 / Math.sqrt(2 + 1) - 1) / 2;
exports.STRETCH_3D = (1 / Math.sqrt(3 + 1) - 1) / 3;
exports.STRETCH_4D = (1 / Math.sqrt(4 + 1) - 1) / 4;
exports.base2D = [
    [1, 1, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 0, 1, 0, 1, 2, 1, 1]
];
exports.base3D = [
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    [2, 1, 1, 0, 2, 1, 0, 1, 2, 0, 1, 1, 3, 1, 1, 1],
    [1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 2, 1, 1, 0, 2, 1, 0, 1, 2, 0, 1, 1]
];
exports.base4D = [
    [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1],
    [3, 1, 1, 1, 0, 3, 1, 1, 0, 1, 3, 1, 0, 1, 1, 3, 0, 1, 1, 1, 4, 1, 1, 1, 1],
    [
        1,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        2,
        1,
        1,
        0,
        0,
        2,
        1,
        0,
        1,
        0,
        2,
        1,
        0,
        0,
        1,
        2,
        0,
        1,
        1,
        0,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        1
    ],
    [
        3,
        1,
        1,
        1,
        0,
        3,
        1,
        1,
        0,
        1,
        3,
        1,
        0,
        1,
        1,
        3,
        0,
        1,
        1,
        1,
        2,
        1,
        1,
        0,
        0,
        2,
        1,
        0,
        1,
        0,
        2,
        1,
        0,
        0,
        1,
        2,
        0,
        1,
        1,
        0,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        0,
        1,
        1
    ]
];
exports.gradients2D = [
    5,
    2,
    2,
    5,
    -5,
    2,
    -2,
    5,
    5,
    -2,
    2,
    -5,
    -5,
    -2,
    -2,
    -5
];
exports.gradients3D = [
    -11,
    4,
    4,
    -4,
    11,
    4,
    -4,
    4,
    11,
    11,
    4,
    4,
    4,
    11,
    4,
    4,
    4,
    11,
    -11,
    -4,
    4,
    -4,
    -11,
    4,
    -4,
    -4,
    11,
    11,
    -4,
    4,
    4,
    -11,
    4,
    4,
    -4,
    11,
    -11,
    4,
    -4,
    -4,
    11,
    -4,
    -4,
    4,
    -11,
    11,
    4,
    -4,
    4,
    11,
    -4,
    4,
    4,
    -11,
    -11,
    -4,
    -4,
    -4,
    -11,
    -4,
    -4,
    -4,
    -11,
    11,
    -4,
    -4,
    4,
    -11,
    -4,
    4,
    -4,
    -11
];
exports.gradients4D = [
    3,
    1,
    1,
    1,
    1,
    3,
    1,
    1,
    1,
    1,
    3,
    1,
    1,
    1,
    1,
    3,
    -3,
    1,
    1,
    1,
    -1,
    3,
    1,
    1,
    -1,
    1,
    3,
    1,
    -1,
    1,
    1,
    3,
    3,
    -1,
    1,
    1,
    1,
    -3,
    1,
    1,
    1,
    -1,
    3,
    1,
    1,
    -1,
    1,
    3,
    -3,
    -1,
    1,
    1,
    -1,
    -3,
    1,
    1,
    -1,
    -1,
    3,
    1,
    -1,
    -1,
    1,
    3,
    3,
    1,
    -1,
    1,
    1,
    3,
    -1,
    1,
    1,
    1,
    -3,
    1,
    1,
    1,
    -1,
    3,
    -3,
    1,
    -1,
    1,
    -1,
    3,
    -1,
    1,
    -1,
    1,
    -3,
    1,
    -1,
    1,
    -1,
    3,
    3,
    -1,
    -1,
    1,
    1,
    -3,
    -1,
    1,
    1,
    -1,
    -3,
    1,
    1,
    -1,
    -1,
    3,
    -3,
    -1,
    -1,
    1,
    -1,
    -3,
    -1,
    1,
    -1,
    -1,
    -3,
    1,
    -1,
    -1,
    -1,
    3,
    3,
    1,
    1,
    -1,
    1,
    3,
    1,
    -1,
    1,
    1,
    3,
    -1,
    1,
    1,
    1,
    -3,
    -3,
    1,
    1,
    -1,
    -1,
    3,
    1,
    -1,
    -1,
    1,
    3,
    -1,
    -1,
    1,
    1,
    -3,
    3,
    -1,
    1,
    -1,
    1,
    -3,
    1,
    -1,
    1,
    -1,
    3,
    -1,
    1,
    -1,
    1,
    -3,
    -3,
    -1,
    1,
    -1,
    -1,
    -3,
    1,
    -1,
    -1,
    -1,
    3,
    -1,
    -1,
    -1,
    1,
    -3,
    3,
    1,
    -1,
    -1,
    1,
    3,
    -1,
    -1,
    1,
    1,
    -3,
    -1,
    1,
    1,
    -1,
    -3,
    -3,
    1,
    -1,
    -1,
    -1,
    3,
    -1,
    -1,
    -1,
    1,
    -3,
    -1,
    -1,
    1,
    -1,
    -3,
    3,
    -1,
    -1,
    -1,
    1,
    -3,
    -1,
    -1,
    1,
    -1,
    -3,
    -1,
    1,
    -1,
    -1,
    -3,
    -3,
    -1,
    -1,
    -1,
    -1,
    -3,
    -1,
    -1,
    -1,
    -1,
    -3,
    -1,
    -1,
    -1,
    -1,
    -3
];
exports.lookupPairs2D = [
    0,
    1,
    1,
    0,
    4,
    1,
    17,
    0,
    20,
    2,
    21,
    2,
    22,
    5,
    23,
    5,
    26,
    4,
    39,
    3,
    42,
    4,
    43,
    3
];
exports.lookupPairs3D = [
    0,
    2,
    1,
    1,
    2,
    2,
    5,
    1,
    6,
    0,
    7,
    0,
    32,
    2,
    34,
    2,
    129,
    1,
    133,
    1,
    160,
    5,
    161,
    5,
    518,
    0,
    519,
    0,
    546,
    4,
    550,
    4,
    645,
    3,
    647,
    3,
    672,
    5,
    673,
    5,
    674,
    4,
    677,
    3,
    678,
    4,
    679,
    3,
    680,
    13,
    681,
    13,
    682,
    12,
    685,
    14,
    686,
    12,
    687,
    14,
    712,
    20,
    714,
    18,
    809,
    21,
    813,
    23,
    840,
    20,
    841,
    21,
    1198,
    19,
    1199,
    22,
    1226,
    18,
    1230,
    19,
    1325,
    23,
    1327,
    22,
    1352,
    15,
    1353,
    17,
    1354,
    15,
    1357,
    17,
    1358,
    16,
    1359,
    16,
    1360,
    11,
    1361,
    10,
    1362,
    11,
    1365,
    10,
    1366,
    9,
    1367,
    9,
    1392,
    11,
    1394,
    11,
    1489,
    10,
    1493,
    10,
    1520,
    8,
    1521,
    8,
    1878,
    9,
    1879,
    9,
    1906,
    7,
    1910,
    7,
    2005,
    6,
    2007,
    6,
    2032,
    8,
    2033,
    8,
    2034,
    7,
    2037,
    6,
    2038,
    7,
    2039,
    6
];
exports.lookupPairs4D = [
    0,
    3,
    1,
    2,
    2,
    3,
    5,
    2,
    6,
    1,
    7,
    1,
    8,
    3,
    9,
    2,
    10,
    3,
    13,
    2,
    16,
    3,
    18,
    3,
    22,
    1,
    23,
    1,
    24,
    3,
    26,
    3,
    33,
    2,
    37,
    2,
    38,
    1,
    39,
    1,
    41,
    2,
    45,
    2,
    54,
    1,
    55,
    1,
    56,
    0,
    57,
    0,
    58,
    0,
    59,
    0,
    60,
    0,
    61,
    0,
    62,
    0,
    63,
    0,
    256,
    3,
    258,
    3,
    264,
    3,
    266,
    3,
    272,
    3,
    274,
    3,
    280,
    3,
    282,
    3,
    2049,
    2,
    2053,
    2,
    2057,
    2,
    2061,
    2,
    2081,
    2,
    2085,
    2,
    2089,
    2,
    2093,
    2,
    2304,
    9,
    2305,
    9,
    2312,
    9,
    2313,
    9,
    16390,
    1,
    16391,
    1,
    16406,
    1,
    16407,
    1,
    16422,
    1,
    16423,
    1,
    16438,
    1,
    16439,
    1,
    16642,
    8,
    16646,
    8,
    16658,
    8,
    16662,
    8,
    18437,
    6,
    18439,
    6,
    18469,
    6,
    18471,
    6,
    18688,
    9,
    18689,
    9,
    18690,
    8,
    18693,
    6,
    18694,
    8,
    18695,
    6,
    18696,
    9,
    18697,
    9,
    18706,
    8,
    18710,
    8,
    18725,
    6,
    18727,
    6,
    131128,
    0,
    131129,
    0,
    131130,
    0,
    131131,
    0,
    131132,
    0,
    131133,
    0,
    131134,
    0,
    131135,
    0,
    131352,
    7,
    131354,
    7,
    131384,
    7,
    131386,
    7,
    133161,
    5,
    133165,
    5,
    133177,
    5,
    133181,
    5,
    133376,
    9,
    133377,
    9,
    133384,
    9,
    133385,
    9,
    133400,
    7,
    133402,
    7,
    133417,
    5,
    133421,
    5,
    133432,
    7,
    133433,
    5,
    133434,
    7,
    133437,
    5,
    147510,
    4,
    147511,
    4,
    147518,
    4,
    147519,
    4,
    147714,
    8,
    147718,
    8,
    147730,
    8,
    147734,
    8,
    147736,
    7,
    147738,
    7,
    147766,
    4,
    147767,
    4,
    147768,
    7,
    147770,
    7,
    147774,
    4,
    147775,
    4,
    149509,
    6,
    149511,
    6,
    149541,
    6,
    149543,
    6,
    149545,
    5,
    149549,
    5,
    149558,
    4,
    149559,
    4,
    149561,
    5,
    149565,
    5,
    149566,
    4,
    149567,
    4,
    149760,
    9,
    149761,
    9,
    149762,
    8,
    149765,
    6,
    149766,
    8,
    149767,
    6,
    149768,
    9,
    149769,
    9,
    149778,
    8,
    149782,
    8,
    149784,
    7,
    149786,
    7,
    149797,
    6,
    149799,
    6,
    149801,
    5,
    149805,
    5,
    149814,
    4,
    149815,
    4,
    149816,
    7,
    149817,
    5,
    149818,
    7,
    149821,
    5,
    149822,
    4,
    149823,
    4,
    149824,
    37,
    149825,
    37,
    149826,
    36,
    149829,
    34,
    149830,
    36,
    149831,
    34,
    149832,
    37,
    149833,
    37,
    149842,
    36,
    149846,
    36,
    149848,
    35,
    149850,
    35,
    149861,
    34,
    149863,
    34,
    149865,
    33,
    149869,
    33,
    149878,
    32,
    149879,
    32,
    149880,
    35,
    149881,
    33,
    149882,
    35,
    149885,
    33,
    149886,
    32,
    149887,
    32,
    150080,
    49,
    150082,
    48,
    150088,
    49,
    150098,
    48,
    150104,
    47,
    150106,
    47,
    151873,
    46,
    151877,
    45,
    151881,
    46,
    151909,
    45,
    151913,
    44,
    151917,
    44,
    152128,
    49,
    152129,
    46,
    152136,
    49,
    152137,
    46,
    166214,
    43,
    166215,
    42,
    166230,
    43,
    166247,
    42,
    166262,
    41,
    166263,
    41,
    166466,
    48,
    166470,
    43,
    166482,
    48,
    166486,
    43,
    168261,
    45,
    168263,
    42,
    168293,
    45,
    168295,
    42,
    168512,
    31,
    168513,
    28,
    168514,
    31,
    168517,
    28,
    168518,
    25,
    168519,
    25,
    280952,
    40,
    280953,
    39,
    280954,
    40,
    280957,
    39,
    280958,
    38,
    280959,
    38,
    281176,
    47,
    281178,
    47,
    281208,
    40,
    281210,
    40,
    282985,
    44,
    282989,
    44,
    283001,
    39,
    283005,
    39,
    283208,
    30,
    283209,
    27,
    283224,
    30,
    283241,
    27,
    283256,
    22,
    283257,
    22,
    297334,
    41,
    297335,
    41,
    297342,
    38,
    297343,
    38,
    297554,
    29,
    297558,
    24,
    297562,
    29,
    297590,
    24,
    297594,
    21,
    297598,
    21,
    299365,
    26,
    299367,
    23,
    299373,
    26,
    299383,
    23,
    299389,
    20,
    299391,
    20,
    299584,
    31,
    299585,
    28,
    299586,
    31,
    299589,
    28,
    299590,
    25,
    299591,
    25,
    299592,
    30,
    299593,
    27,
    299602,
    29,
    299606,
    24,
    299608,
    30,
    299610,
    29,
    299621,
    26,
    299623,
    23,
    299625,
    27,
    299629,
    26,
    299638,
    24,
    299639,
    23,
    299640,
    22,
    299641,
    22,
    299642,
    21,
    299645,
    20,
    299646,
    21,
    299647,
    20,
    299648,
    61,
    299649,
    60,
    299650,
    61,
    299653,
    60,
    299654,
    59,
    299655,
    59,
    299656,
    58,
    299657,
    57,
    299666,
    55,
    299670,
    54,
    299672,
    58,
    299674,
    55,
    299685,
    52,
    299687,
    51,
    299689,
    57,
    299693,
    52,
    299702,
    54,
    299703,
    51,
    299704,
    56,
    299705,
    56,
    299706,
    53,
    299709,
    50,
    299710,
    53,
    299711,
    50,
    299904,
    61,
    299906,
    61,
    299912,
    58,
    299922,
    55,
    299928,
    58,
    299930,
    55,
    301697,
    60,
    301701,
    60,
    301705,
    57,
    301733,
    52,
    301737,
    57,
    301741,
    52,
    301952,
    79,
    301953,
    79,
    301960,
    76,
    301961,
    76,
    316038,
    59,
    316039,
    59,
    316054,
    54,
    316071,
    51,
    316086,
    54,
    316087,
    51,
    316290,
    78,
    316294,
    78,
    316306,
    73,
    316310,
    73,
    318085,
    77,
    318087,
    77,
    318117,
    70,
    318119,
    70,
    318336,
    79,
    318337,
    79,
    318338,
    78,
    318341,
    77,
    318342,
    78,
    318343,
    77,
    430776,
    56,
    430777,
    56,
    430778,
    53,
    430781,
    50,
    430782,
    53,
    430783,
    50,
    431000,
    75,
    431002,
    72,
    431032,
    75,
    431034,
    72,
    432809,
    74,
    432813,
    69,
    432825,
    74,
    432829,
    69,
    433032,
    76,
    433033,
    76,
    433048,
    75,
    433065,
    74,
    433080,
    75,
    433081,
    74,
    447158,
    71,
    447159,
    68,
    447166,
    71,
    447167,
    68,
    447378,
    73,
    447382,
    73,
    447386,
    72,
    447414,
    71,
    447418,
    72,
    447422,
    71,
    449189,
    70,
    449191,
    70,
    449197,
    69,
    449207,
    68,
    449213,
    69,
    449215,
    68,
    449408,
    67,
    449409,
    67,
    449410,
    66,
    449413,
    64,
    449414,
    66,
    449415,
    64,
    449416,
    67,
    449417,
    67,
    449426,
    66,
    449430,
    66,
    449432,
    65,
    449434,
    65,
    449445,
    64,
    449447,
    64,
    449449,
    63,
    449453,
    63,
    449462,
    62,
    449463,
    62,
    449464,
    65,
    449465,
    63,
    449466,
    65,
    449469,
    63,
    449470,
    62,
    449471,
    62,
    449472,
    19,
    449473,
    19,
    449474,
    18,
    449477,
    16,
    449478,
    18,
    449479,
    16,
    449480,
    19,
    449481,
    19,
    449490,
    18,
    449494,
    18,
    449496,
    17,
    449498,
    17,
    449509,
    16,
    449511,
    16,
    449513,
    15,
    449517,
    15,
    449526,
    14,
    449527,
    14,
    449528,
    17,
    449529,
    15,
    449530,
    17,
    449533,
    15,
    449534,
    14,
    449535,
    14,
    449728,
    19,
    449729,
    19,
    449730,
    18,
    449734,
    18,
    449736,
    19,
    449737,
    19,
    449746,
    18,
    449750,
    18,
    449752,
    17,
    449754,
    17,
    449784,
    17,
    449786,
    17,
    451520,
    19,
    451521,
    19,
    451525,
    16,
    451527,
    16,
    451528,
    19,
    451529,
    19,
    451557,
    16,
    451559,
    16,
    451561,
    15,
    451565,
    15,
    451577,
    15,
    451581,
    15,
    451776,
    19,
    451777,
    19,
    451784,
    19,
    451785,
    19,
    465858,
    18,
    465861,
    16,
    465862,
    18,
    465863,
    16,
    465874,
    18,
    465878,
    18,
    465893,
    16,
    465895,
    16,
    465910,
    14,
    465911,
    14,
    465918,
    14,
    465919,
    14,
    466114,
    18,
    466118,
    18,
    466130,
    18,
    466134,
    18,
    467909,
    16,
    467911,
    16,
    467941,
    16,
    467943,
    16,
    468160,
    13,
    468161,
    13,
    468162,
    13,
    468163,
    13,
    468164,
    13,
    468165,
    13,
    468166,
    13,
    468167,
    13,
    580568,
    17,
    580570,
    17,
    580585,
    15,
    580589,
    15,
    580598,
    14,
    580599,
    14,
    580600,
    17,
    580601,
    15,
    580602,
    17,
    580605,
    15,
    580606,
    14,
    580607,
    14,
    580824,
    17,
    580826,
    17,
    580856,
    17,
    580858,
    17,
    582633,
    15,
    582637,
    15,
    582649,
    15,
    582653,
    15,
    582856,
    12,
    582857,
    12,
    582872,
    12,
    582873,
    12,
    582888,
    12,
    582889,
    12,
    582904,
    12,
    582905,
    12,
    596982,
    14,
    596983,
    14,
    596990,
    14,
    596991,
    14,
    597202,
    11,
    597206,
    11,
    597210,
    11,
    597214,
    11,
    597234,
    11,
    597238,
    11,
    597242,
    11,
    597246,
    11,
    599013,
    10,
    599015,
    10,
    599021,
    10,
    599023,
    10,
    599029,
    10,
    599031,
    10,
    599037,
    10,
    599039,
    10,
    599232,
    13,
    599233,
    13,
    599234,
    13,
    599235,
    13,
    599236,
    13,
    599237,
    13,
    599238,
    13,
    599239,
    13,
    599240,
    12,
    599241,
    12,
    599250,
    11,
    599254,
    11,
    599256,
    12,
    599257,
    12,
    599258,
    11,
    599262,
    11,
    599269,
    10,
    599271,
    10,
    599272,
    12,
    599273,
    12,
    599277,
    10,
    599279,
    10,
    599282,
    11,
    599285,
    10,
    599286,
    11,
    599287,
    10,
    599288,
    12,
    599289,
    12,
    599290,
    11,
    599293,
    10,
    599294,
    11,
    599295,
    10
];
exports.p2D = [
    0,
    0,
    1,
    -1,
    0,
    0,
    -1,
    1,
    0,
    2,
    1,
    1,
    1,
    2,
    2,
    0,
    1,
    2,
    0,
    2,
    1,
    0,
    0,
    0
];
exports.p3D = [
    0,
    0,
    1,
    -1,
    0,
    0,
    1,
    0,
    -1,
    0,
    0,
    -1,
    1,
    0,
    0,
    0,
    1,
    -1,
    0,
    0,
    -1,
    0,
    1,
    0,
    0,
    -1,
    1,
    0,
    2,
    1,
    1,
    0,
    1,
    1,
    1,
    -1,
    0,
    2,
    1,
    0,
    1,
    1,
    1,
    -1,
    1,
    0,
    2,
    0,
    1,
    1,
    1,
    -1,
    1,
    1,
    1,
    3,
    2,
    1,
    0,
    3,
    1,
    2,
    0,
    1,
    3,
    2,
    0,
    1,
    3,
    1,
    0,
    2,
    1,
    3,
    0,
    2,
    1,
    3,
    0,
    1,
    2,
    1,
    1,
    1,
    0,
    0,
    2,
    2,
    0,
    0,
    1,
    1,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    1,
    0,
    0,
    1,
    2,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    1,
    1,
    -1,
    1,
    2,
    0,
    0,
    0,
    0,
    1,
    -1,
    1,
    1,
    2,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    -1,
    2,
    3,
    1,
    1,
    1,
    2,
    0,
    0,
    2,
    2,
    3,
    1,
    1,
    1,
    2,
    2,
    0,
    0,
    2,
    3,
    1,
    1,
    1,
    2,
    0,
    2,
    0,
    2,
    1,
    1,
    -1,
    1,
    2,
    0,
    0,
    2,
    2,
    1,
    1,
    -1,
    1,
    2,
    2,
    0,
    0,
    2,
    1,
    -1,
    1,
    1,
    2,
    0,
    0,
    2,
    2,
    1,
    -1,
    1,
    1,
    2,
    0,
    2,
    0,
    2,
    1,
    1,
    1,
    -1,
    2,
    2,
    0,
    0,
    2,
    1,
    1,
    1,
    -1,
    2,
    0,
    2,
    0
];
exports.p4D = [
    0,
    0,
    1,
    -1,
    0,
    0,
    0,
    1,
    0,
    -1,
    0,
    0,
    1,
    0,
    0,
    -1,
    0,
    0,
    -1,
    1,
    0,
    0,
    0,
    0,
    1,
    -1,
    0,
    0,
    0,
    1,
    0,
    -1,
    0,
    0,
    -1,
    0,
    1,
    0,
    0,
    0,
    -1,
    1,
    0,
    0,
    0,
    0,
    1,
    -1,
    0,
    0,
    -1,
    0,
    0,
    1,
    0,
    0,
    -1,
    0,
    1,
    0,
    0,
    0,
    -1,
    1,
    0,
    2,
    1,
    1,
    0,
    0,
    1,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    0,
    2,
    1,
    0,
    1,
    0,
    1,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    0,
    2,
    0,
    1,
    1,
    0,
    1,
    -1,
    1,
    1,
    0,
    1,
    0,
    1,
    1,
    -1,
    0,
    2,
    1,
    0,
    0,
    1,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    0,
    2,
    0,
    1,
    0,
    1,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    1,
    0,
    2,
    0,
    0,
    1,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    1,
    1,
    4,
    2,
    1,
    1,
    0,
    4,
    1,
    2,
    1,
    0,
    4,
    1,
    1,
    2,
    0,
    1,
    4,
    2,
    1,
    0,
    1,
    4,
    1,
    2,
    0,
    1,
    4,
    1,
    1,
    0,
    2,
    1,
    4,
    2,
    0,
    1,
    1,
    4,
    1,
    0,
    2,
    1,
    4,
    1,
    0,
    1,
    2,
    1,
    4,
    0,
    2,
    1,
    1,
    4,
    0,
    1,
    2,
    1,
    4,
    0,
    1,
    1,
    2,
    1,
    2,
    1,
    1,
    0,
    0,
    3,
    2,
    1,
    0,
    0,
    3,
    1,
    2,
    0,
    0,
    1,
    2,
    1,
    0,
    1,
    0,
    3,
    2,
    0,
    1,
    0,
    3,
    1,
    0,
    2,
    0,
    1,
    2,
    0,
    1,
    1,
    0,
    3,
    0,
    2,
    1,
    0,
    3,
    0,
    1,
    2,
    0,
    1,
    2,
    1,
    0,
    0,
    1,
    3,
    2,
    0,
    0,
    1,
    3,
    1,
    0,
    0,
    2,
    1,
    2,
    0,
    1,
    0,
    1,
    3,
    0,
    2,
    0,
    1,
    3,
    0,
    1,
    0,
    2,
    1,
    2,
    0,
    0,
    1,
    1,
    3,
    0,
    0,
    2,
    1,
    3,
    0,
    0,
    1,
    2,
    2,
    3,
    1,
    1,
    1,
    0,
    2,
    1,
    1,
    1,
    -1,
    2,
    2,
    0,
    0,
    0,
    2,
    3,
    1,
    1,
    0,
    1,
    2,
    1,
    1,
    -1,
    1,
    2,
    2,
    0,
    0,
    0,
    2,
    3,
    1,
    0,
    1,
    1,
    2,
    1,
    -1,
    1,
    1,
    2,
    2,
    0,
    0,
    0,
    2,
    3,
    1,
    1,
    1,
    0,
    2,
    1,
    1,
    1,
    -1,
    2,
    0,
    2,
    0,
    0,
    2,
    3,
    1,
    1,
    0,
    1,
    2,
    1,
    1,
    -1,
    1,
    2,
    0,
    2,
    0,
    0,
    2,
    3,
    0,
    1,
    1,
    1,
    2,
    -1,
    1,
    1,
    1,
    2,
    0,
    2,
    0,
    0,
    2,
    3,
    1,
    1,
    1,
    0,
    2,
    1,
    1,
    1,
    -1,
    2,
    0,
    0,
    2,
    0,
    2,
    3,
    1,
    0,
    1,
    1,
    2,
    1,
    -1,
    1,
    1,
    2,
    0,
    0,
    2,
    0,
    2,
    3,
    0,
    1,
    1,
    1,
    2,
    -1,
    1,
    1,
    1,
    2,
    0,
    0,
    2,
    0,
    2,
    3,
    1,
    1,
    0,
    1,
    2,
    1,
    1,
    -1,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    3,
    1,
    0,
    1,
    1,
    2,
    1,
    -1,
    1,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    3,
    0,
    1,
    1,
    1,
    2,
    -1,
    1,
    1,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    1,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    0,
    0,
    0,
    0,
    0,
    2,
    1,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    0,
    0,
    0,
    0,
    0,
    2,
    1,
    -1,
    1,
    1,
    0,
    1,
    0,
    1,
    1,
    -1,
    0,
    0,
    0,
    0,
    0,
    2,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    0,
    0,
    0,
    0,
    0,
    2,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    1,
    0,
    0,
    0,
    0,
    0,
    2,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    2,
    1,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    2,
    2,
    0,
    0,
    0,
    2,
    1,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    2,
    2,
    0,
    0,
    0,
    2,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    2,
    2,
    0,
    0,
    0,
    2,
    1,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    2,
    0,
    2,
    0,
    0,
    2,
    1,
    -1,
    1,
    1,
    0,
    1,
    0,
    1,
    1,
    -1,
    2,
    0,
    2,
    0,
    0,
    2,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    1,
    2,
    0,
    2,
    0,
    0,
    2,
    1,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    2,
    0,
    0,
    2,
    0,
    2,
    1,
    -1,
    1,
    1,
    0,
    1,
    0,
    1,
    1,
    -1,
    2,
    0,
    0,
    2,
    0,
    2,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    1,
    2,
    0,
    0,
    2,
    0,
    2,
    1,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    1,
    -1,
    1,
    0,
    1,
    1,
    0,
    1,
    -1,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    1,
    -1,
    0,
    1,
    1,
    1,
    0,
    -1,
    1,
    1,
    2,
    0,
    0,
    0,
    2,
    3,
    1,
    1,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    2,
    1,
    1,
    1,
    -1,
    3,
    1,
    0,
    1,
    0,
    0,
    2,
    0,
    2,
    0,
    0,
    2,
    1,
    1,
    1,
    -1,
    3,
    1,
    0,
    0,
    1,
    0,
    2,
    0,
    0,
    2,
    0,
    2,
    1,
    1,
    1,
    -1,
    3,
    1,
    1,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    2,
    1,
    1,
    -1,
    1,
    3,
    1,
    0,
    1,
    0,
    0,
    2,
    0,
    2,
    0,
    0,
    2,
    1,
    1,
    -1,
    1,
    3,
    1,
    0,
    0,
    0,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    1,
    1,
    -1,
    1,
    3,
    1,
    1,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    2,
    1,
    -1,
    1,
    1,
    3,
    1,
    0,
    0,
    1,
    0,
    2,
    0,
    0,
    2,
    0,
    2,
    1,
    -1,
    1,
    1,
    3,
    1,
    0,
    0,
    0,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    1,
    -1,
    1,
    1,
    3,
    1,
    0,
    1,
    0,
    0,
    2,
    0,
    2,
    0,
    0,
    2,
    -1,
    1,
    1,
    1,
    3,
    1,
    0,
    0,
    1,
    0,
    2,
    0,
    0,
    2,
    0,
    2,
    -1,
    1,
    1,
    1,
    3,
    1,
    0,
    0,
    0,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    -1,
    1,
    1,
    1,
    3,
    3,
    2,
    1,
    0,
    0,
    3,
    1,
    2,
    0,
    0,
    4,
    1,
    1,
    1,
    1,
    3,
    3,
    2,
    0,
    1,
    0,
    3,
    1,
    0,
    2,
    0,
    4,
    1,
    1,
    1,
    1,
    3,
    3,
    0,
    2,
    1,
    0,
    3,
    0,
    1,
    2,
    0,
    4,
    1,
    1,
    1,
    1,
    3,
    3,
    2,
    0,
    0,
    1,
    3,
    1,
    0,
    0,
    2,
    4,
    1,
    1,
    1,
    1,
    3,
    3,
    0,
    2,
    0,
    1,
    3,
    0,
    1,
    0,
    2,
    4,
    1,
    1,
    1,
    1,
    3,
    3,
    0,
    0,
    2,
    1,
    3,
    0,
    0,
    1,
    2,
    4,
    1,
    1,
    1,
    1,
    3,
    3,
    2,
    1,
    0,
    0,
    3,
    1,
    2,
    0,
    0,
    2,
    1,
    1,
    1,
    -1,
    3,
    3,
    2,
    0,
    1,
    0,
    3,
    1,
    0,
    2,
    0,
    2,
    1,
    1,
    1,
    -1,
    3,
    3,
    0,
    2,
    1,
    0,
    3,
    0,
    1,
    2,
    0,
    2,
    1,
    1,
    1,
    -1,
    3,
    3,
    2,
    1,
    0,
    0,
    3,
    1,
    2,
    0,
    0,
    2,
    1,
    1,
    -1,
    1,
    3,
    3,
    2,
    0,
    0,
    1,
    3,
    1,
    0,
    0,
    2,
    2,
    1,
    1,
    -1,
    1,
    3,
    3,
    0,
    2,
    0,
    1,
    3,
    0,
    1,
    0,
    2,
    2,
    1,
    1,
    -1,
    1,
    3,
    3,
    2,
    0,
    1,
    0,
    3,
    1,
    0,
    2,
    0,
    2,
    1,
    -1,
    1,
    1,
    3,
    3,
    2,
    0,
    0,
    1,
    3,
    1,
    0,
    0,
    2,
    2,
    1,
    -1,
    1,
    1,
    3,
    3,
    0,
    0,
    2,
    1,
    3,
    0,
    0,
    1,
    2,
    2,
    1,
    -1,
    1,
    1,
    3,
    3,
    0,
    2,
    1,
    0,
    3,
    0,
    1,
    2,
    0,
    2,
    -1,
    1,
    1,
    1,
    3,
    3,
    0,
    2,
    0,
    1,
    3,
    0,
    1,
    0,
    2,
    2,
    -1,
    1,
    1,
    1,
    3,
    3,
    0,
    0,
    2,
    1,
    3,
    0,
    0,
    1,
    2,
    2,
    -1,
    1,
    1,
    1
];

},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeNoise4D = exports.makeNoise3D = exports.makeNoise2D = void 0;
var constants_1 = require("./constants");
function contribution2D(multiplier, xsb, ysb) {
    return {
        dx: -xsb - multiplier * constants_1.SQUISH_2D,
        dy: -ysb - multiplier * constants_1.SQUISH_2D,
        xsb: xsb,
        ysb: ysb
    };
}
function contribution3D(multiplier, xsb, ysb, zsb) {
    return {
        dx: -xsb - multiplier * constants_1.SQUISH_3D,
        dy: -ysb - multiplier * constants_1.SQUISH_3D,
        dz: -zsb - multiplier * constants_1.SQUISH_3D,
        xsb: xsb,
        ysb: ysb,
        zsb: zsb
    };
}
function contribution4D(multiplier, xsb, ysb, zsb, wsb) {
    return {
        dx: -xsb - multiplier * constants_1.SQUISH_4D,
        dy: -ysb - multiplier * constants_1.SQUISH_4D,
        dz: -zsb - multiplier * constants_1.SQUISH_4D,
        dw: -wsb - multiplier * constants_1.SQUISH_4D,
        xsb: xsb,
        ysb: ysb,
        zsb: zsb,
        wsb: wsb
    };
}
function makeNoise2D(clientSeed) {
    var contributions = [];
    for (var i = 0; i < constants_1.p2D.length; i += 4) {
        var baseSet = constants_1.base2D[constants_1.p2D[i]];
        var previous = null;
        var current = null;
        for (var k = 0; k < baseSet.length; k += 3) {
            current = contribution2D(baseSet[k], baseSet[k + 1], baseSet[k + 2]);
            if (previous === null)
                contributions[i / 4] = current;
            else
                previous.next = current;
            previous = current;
        }
        current.next = contribution2D(constants_1.p2D[i + 1], constants_1.p2D[i + 2], constants_1.p2D[i + 3]);
    }
    var lookup = [];
    for (var i = 0; i < constants_1.lookupPairs2D.length; i += 2) {
        lookup[constants_1.lookupPairs2D[i]] = contributions[constants_1.lookupPairs2D[i + 1]];
    }
    var perm = new Uint8Array(256);
    var perm2D = new Uint8Array(256);
    var source = new Uint8Array(256);
    for (var i = 0; i < 256; i++)
        source[i] = i;
    var seed = new Uint32Array(1);
    seed[0] = clientSeed;
    seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));
    for (var i = 255; i >= 0; i--) {
        seed = shuffleSeed(seed);
        var r = new Uint32Array(1);
        r[0] = (seed[0] + 31) % (i + 1);
        if (r[0] < 0)
            r[0] += i + 1;
        perm[i] = source[r[0]];
        perm2D[i] = perm[i] & 0x0e;
        source[r[0]] = source[i];
    }
    return function (x, y) {
        var stretchOffset = (x + y) * constants_1.STRETCH_2D;
        var xs = x + stretchOffset;
        var ys = y + stretchOffset;
        var xsb = Math.floor(xs);
        var ysb = Math.floor(ys);
        var squishOffset = (xsb + ysb) * constants_1.SQUISH_2D;
        var dx0 = x - (xsb + squishOffset);
        var dy0 = y - (ysb + squishOffset);
        var xins = xs - xsb;
        var yins = ys - ysb;
        var inSum = xins + yins;
        var hash = (xins - yins + 1) |
            (inSum << 1) |
            ((inSum + yins) << 2) |
            ((inSum + xins) << 4);
        var value = 0;
        for (var c = lookup[hash]; c !== undefined; c = c.next) {
            var dx = dx0 + c.dx;
            var dy = dy0 + c.dy;
            var attn = 2 - dx * dx - dy * dy;
            if (attn > 0) {
                var px = xsb + c.xsb;
                var py = ysb + c.ysb;
                var indexPartA = perm[px & 0xff];
                var index = perm2D[(indexPartA + py) & 0xff];
                var valuePart = constants_1.gradients2D[index] * dx + constants_1.gradients2D[index + 1] * dy;
                value += attn * attn * attn * attn * valuePart;
            }
        }
        return value * constants_1.NORM_2D;
    };
}
exports.makeNoise2D = makeNoise2D;
function makeNoise3D(clientSeed) {
    var contributions = [];
    for (var i = 0; i < constants_1.p3D.length; i += 9) {
        var baseSet = constants_1.base3D[constants_1.p3D[i]];
        var previous = null;
        var current = null;
        for (var k = 0; k < baseSet.length; k += 4) {
            current = contribution3D(baseSet[k], baseSet[k + 1], baseSet[k + 2], baseSet[k + 3]);
            if (previous === null)
                contributions[i / 9] = current;
            else
                previous.next = current;
            previous = current;
        }
        current.next = contribution3D(constants_1.p3D[i + 1], constants_1.p3D[i + 2], constants_1.p3D[i + 3], constants_1.p3D[i + 4]);
        current.next.next = contribution3D(constants_1.p3D[i + 5], constants_1.p3D[i + 6], constants_1.p3D[i + 7], constants_1.p3D[i + 8]);
    }
    var lookup = [];
    for (var i = 0; i < constants_1.lookupPairs3D.length; i += 2) {
        lookup[constants_1.lookupPairs3D[i]] = contributions[constants_1.lookupPairs3D[i + 1]];
    }
    var perm = new Uint8Array(256);
    var perm3D = new Uint8Array(256);
    var source = new Uint8Array(256);
    for (var i = 0; i < 256; i++)
        source[i] = i;
    var seed = new Uint32Array(1);
    seed[0] = clientSeed;
    seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));
    for (var i = 255; i >= 0; i--) {
        seed = shuffleSeed(seed);
        var r = new Uint32Array(1);
        r[0] = (seed[0] + 31) % (i + 1);
        if (r[0] < 0)
            r[0] += i + 1;
        perm[i] = source[r[0]];
        perm3D[i] = (perm[i] % 24) * 3;
        source[r[0]] = source[i];
    }
    return function (x, y, z) {
        var stretchOffset = (x + y + z) * constants_1.STRETCH_3D;
        var xs = x + stretchOffset;
        var ys = y + stretchOffset;
        var zs = z + stretchOffset;
        var xsb = Math.floor(xs);
        var ysb = Math.floor(ys);
        var zsb = Math.floor(zs);
        var squishOffset = (xsb + ysb + zsb) * constants_1.SQUISH_3D;
        var dx0 = x - (xsb + squishOffset);
        var dy0 = y - (ysb + squishOffset);
        var dz0 = z - (zsb + squishOffset);
        var xins = xs - xsb;
        var yins = ys - ysb;
        var zins = zs - zsb;
        var inSum = xins + yins + zins;
        var hash = (yins - zins + 1) |
            ((xins - yins + 1) << 1) |
            ((xins - zins + 1) << 2) |
            (inSum << 3) |
            ((inSum + zins) << 5) |
            ((inSum + yins) << 7) |
            ((inSum + xins) << 9);
        var value = 0;
        for (var c = lookup[hash]; c !== undefined; c = c.next) {
            var dx = dx0 + c.dx;
            var dy = dy0 + c.dy;
            var dz = dz0 + c.dz;
            var attn = 2 - dx * dx - dy * dy - dz * dz;
            if (attn > 0) {
                var px = xsb + c.xsb;
                var py = ysb + c.ysb;
                var pz = zsb + c.zsb;
                var indexPartA = perm[px & 0xff];
                var indexPartB = perm[(indexPartA + py) & 0xff];
                var index = perm3D[(indexPartB + pz) & 0xff];
                var valuePart = constants_1.gradients3D[index] * dx +
                    constants_1.gradients3D[index + 1] * dy +
                    constants_1.gradients3D[index + 2] * dz;
                value += attn * attn * attn * attn * valuePart;
            }
        }
        return value * constants_1.NORM_3D;
    };
}
exports.makeNoise3D = makeNoise3D;
function makeNoise4D(clientSeed) {
    var contributions = [];
    for (var i = 0; i < constants_1.p4D.length; i += 16) {
        var baseSet = constants_1.base4D[constants_1.p4D[i]];
        var previous = null;
        var current = null;
        for (var k = 0; k < baseSet.length; k += 5) {
            current = contribution4D(baseSet[k], baseSet[k + 1], baseSet[k + 2], baseSet[k + 3], baseSet[k + 4]);
            if (previous === null)
                contributions[i / 16] = current;
            else
                previous.next = current;
            previous = current;
        }
        current.next = contribution4D(constants_1.p4D[i + 1], constants_1.p4D[i + 2], constants_1.p4D[i + 3], constants_1.p4D[i + 4], constants_1.p4D[i + 5]);
        current.next.next = contribution4D(constants_1.p4D[i + 6], constants_1.p4D[i + 7], constants_1.p4D[i + 8], constants_1.p4D[i + 9], constants_1.p4D[i + 10]);
        current.next.next.next = contribution4D(constants_1.p4D[i + 11], constants_1.p4D[i + 12], constants_1.p4D[i + 13], constants_1.p4D[i + 14], constants_1.p4D[i + 15]);
    }
    var lookup = [];
    for (var i = 0; i < constants_1.lookupPairs4D.length; i += 2) {
        lookup[constants_1.lookupPairs4D[i]] = contributions[constants_1.lookupPairs4D[i + 1]];
    }
    var perm = new Uint8Array(256);
    var perm4D = new Uint8Array(256);
    var source = new Uint8Array(256);
    for (var i = 0; i < 256; i++)
        source[i] = i;
    var seed = new Uint32Array(1);
    seed[0] = clientSeed;
    seed = shuffleSeed(shuffleSeed(shuffleSeed(seed)));
    for (var i = 255; i >= 0; i--) {
        seed = shuffleSeed(seed);
        var r = new Uint32Array(1);
        r[0] = (seed[0] + 31) % (i + 1);
        if (r[0] < 0)
            r[0] += i + 1;
        perm[i] = source[r[0]];
        perm4D[i] = perm[i] & 0xfc;
        source[r[0]] = source[i];
    }
    return function (x, y, z, w) {
        var stretchOffset = (x + y + z + w) * constants_1.STRETCH_4D;
        var xs = x + stretchOffset;
        var ys = y + stretchOffset;
        var zs = z + stretchOffset;
        var ws = w + stretchOffset;
        var xsb = Math.floor(xs);
        var ysb = Math.floor(ys);
        var zsb = Math.floor(zs);
        var wsb = Math.floor(ws);
        var squishOffset = (xsb + ysb + zsb + wsb) * constants_1.SQUISH_4D;
        var dx0 = x - (xsb + squishOffset);
        var dy0 = y - (ysb + squishOffset);
        var dz0 = z - (zsb + squishOffset);
        var dw0 = w - (wsb + squishOffset);
        var xins = xs - xsb;
        var yins = ys - ysb;
        var zins = zs - zsb;
        var wins = ws - wsb;
        var inSum = xins + yins + zins + wins;
        var hash = (zins - wins + 1) |
            ((yins - zins + 1) << 1) |
            ((yins - wins + 1) << 2) |
            ((xins - yins + 1) << 3) |
            ((xins - zins + 1) << 4) |
            ((xins - wins + 1) << 5) |
            (inSum << 6) |
            ((inSum + wins) << 8) |
            ((inSum + zins) << 11) |
            ((inSum + yins) << 14) |
            ((inSum + xins) << 17);
        var value = 0;
        for (var c = lookup[hash]; c !== undefined; c = c.next) {
            var dx = dx0 + c.dx;
            var dy = dy0 + c.dy;
            var dz = dz0 + c.dz;
            var dw = dw0 + c.dw;
            var attn = 2 - dx * dx - dy * dy - dz * dz - dw * dw;
            if (attn > 0) {
                var px = xsb + c.xsb;
                var py = ysb + c.ysb;
                var pz = zsb + c.zsb;
                var pw = wsb + c.wsb;
                var indexPartA = perm[px & 0xff];
                var indexPartB = perm[(indexPartA + py) & 0xff];
                var indexPartC = perm[(indexPartB + pz) & 0xff];
                var index = perm4D[(indexPartC + pw) & 0xff];
                var valuePart = constants_1.gradients4D[index] * dx +
                    constants_1.gradients4D[index + 1] * dy +
                    constants_1.gradients4D[index + 2] * dz +
                    constants_1.gradients4D[index + 3] * dw;
                value += attn * attn * attn * attn * valuePart;
            }
        }
        return value * constants_1.NORM_4D;
    };
}
exports.makeNoise4D = makeNoise4D;
function shuffleSeed(seed) {
    var newSeed = new Uint32Array(1);
    newSeed[0] = seed[0] * 1664525 + 1013904223;
    return newSeed;
}

},{"./constants":8}]},{},[7]);
